(expect "repl starts with empty hash" (hash "") (tx-hash))
(env-hash (hash "hello"))
(expect "hash roundtrip" (hash "hello") (tx-hash))

(begin-tx)
(env-exec-config ["DisablePact48"])

(module my-mod G
  (defcap G() true)

  (defschema hashes h:string)
  (deftable hashes-table:{hashes})

  (defun get-hash (k:string)
    (at "h" (read hashes-table k)))

  (defun insert-hash (k:string h:string)
    (write hashes-table k {"h":h})
    (concat ["added hash ", h, " to table"])
  )
  )

(create-table hashes-table)

; pre fork module hashing
(insert-hash "a" (hash my-mod))
(insert-hash "b" (hash my-mod))
(let*
  ( (h1 (get-hash "a"))
    (h2 (get-hash "b"))
  )
  (expect-failure "hashes do not match pre-fork" (enforce (= h1 h2) "boom"))
  )


(env-exec-config [])
; post fork module hashing
(insert-hash "a" (hash my-mod))
(insert-hash "b" (hash my-mod))


(let*
  ( (h1 (get-hash "a"))
    (h2 (get-hash "b"))
  )
  (expect "hashes match post-fork" true (enforce (= h1 h2) "boom"))
  )
(commit-tx)
